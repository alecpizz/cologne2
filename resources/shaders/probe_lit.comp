#version 460 core
#extension GL_ARB_bindless_texture : require

layout (local_size_x = 4, local_size_y = 4, local_size_z = 4) in;

layout(binding = 0, std430) readonly buffer probe_gbuffers
{
    samplerCube cubemaps[];
};

layout(binding = 1, std430) readonly buffer probe_positions
{
    vec4 positions[];
};

layout(binding = 2, std430) buffer shCoefficients
{
    vec3 L1SH_0[10000];
    vec3 L1SH_1[10000];
    vec3 L1SH_2[10000];
    vec3 L1SH_3[10000];
};

uniform int probe_height;
uniform int probe_width;
uniform int probe_depth;
uniform float spacing;
uniform vec3 origin;
layout(binding = 0, rgba32f) uniform image3D sh_texture;

uniform samplerCubeArray g_colors[3];
uniform samplerCubeArray g_norms[3];
uniform samplerCubeArray g_positions[3];
uniform samplerCubeArray g_orms[3];
uniform samplerCubeArray g_depths[3];

#define PI 3.1415926535897932384626433832795
#define MAX_LIGHTS 8
#define DIRECTIONAL 0
#define POINT 1

//https://www.shadertoy.com/view/wtt3W2
#define myT vec3
#define myL 1
#define SphericalHarmonicsTL(T, L) T[(L + 1)*(L + 1)]
#define SphericalHarmonics SphericalHarmonicsTL(myT, myL)
#define shSize(L) ((L + 1)*(L + 1))

struct Light
{
    vec3 position;
    vec3 direction;
    vec3 color;
    float radius;
    float strength;
    int type;
};

uniform Light lights[MAX_LIGHTS];
uniform int num_lights = 0;



SphericalHarmonics shZero()
{
    SphericalHarmonics result;
    for (int i = 0; i < shSize(myL); ++i)
    {
        result[i] = myT(0.0);
    }
    return result;
}


void shAddWeighted(inout SphericalHarmonics accumulatorSh, in SphericalHarmonics sh, myT weight)
{
    for (int i = 0; i < shSize(myL); ++i)
    {
        accumulatorSh[i] += sh[i] * weight;
    }
}

void shScale(inout SphericalHarmonics sh, myT scale)
{
    for (int i = 0; i < shSize(myL); ++i)
    {
        sh[i] *= scale;
    }
}


float klemenVisibility(vec3 L, vec3 H)
{
    float LoH = dot(L, H);
    return 0.25 / (LoH * LoH);
}

vec3 fresnelSchlick(float cosTheta, vec3 F0)
{
    return F0 + (1.0 - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);
}

vec3 fresnelSchlickRoughness(float cosTheta, vec3 F0, float roughness)
{
    return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);
}

float distributionGGX(vec3 N, vec3 H, float roughness)
{
    float a = roughness * roughness;
    float a2 = a * a;
    float NdotH = max(dot(N, H), 0.0);
    float NdotH2 = NdotH * NdotH;

    float num = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;
    return num / denom;
}

float geometrySchlickGGX(float NdotV, float roughness)
{
    float r = (roughness + 1.0);
    float k = (r * r) / 2.0;

    float num = NdotV;
    float denom = NdotV * (1.0 - k) + k;
    return num / denom;
}

float geometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
{
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);

    float ggx2 = geometrySchlickGGX(NdotV, roughness);
    float ggx1 = geometrySchlickGGX(NdotL, roughness);
    return ggx1 * ggx2;
}

const float goldenAngle = 2.3999632297286533222315555066336;// PI * (3.0 - sqrt(5.0));

vec3 direct_lighting(vec3 p, float bias, int probeId)
{
    vec3 diffuse = texture(cubemaps[probeId * 4 + 0], p).rgb;
    vec3 FragPos = texture(cubemaps[probeId * 4 + 2], p).rgb;
    vec3 probe_world_pos = positions[probeId].xyz;

    vec3 N = normalize(texture(cubemaps[probeId * 4 + 1], p).rgb);
    vec3 V = normalize(probe_world_pos - FragPos);

    vec3 orm = texture(cubemaps[probeId * 4 + 3], p).rgb;
    float metallic = 0.2;
    float roughness = 1;
    float ao = orm.b + 0.2;

    vec3 F0 = mix(vec3(0.04), diffuse, metallic);
    vec3 Lo = vec3(0.0);

    for (int i = 0; i < num_lights; i++)
    {
        vec3 L = vec3(0.0);
        vec3 radiance = vec3(0.0);
        if (lights[i].type == DIRECTIONAL)
        {
            L = normalize(-lights[i].direction);
            radiance = lights[i].color;
        }
        else
        {
            L = normalize(lights[i].position - FragPos);
            float distance = length(lights[i].position - FragPos);
            float attenutation = 1.0 / (distance * distance);
            radiance = lights[i].color * attenutation;
        }
        vec3 H = normalize(V + L);


        float NDF = distributionGGX(N, H, roughness);
        float G = geometrySmith(N, V, L, roughness);
        vec3 F = fresnelSchlick(max(dot(H, V), 0.0), F0);

        vec3 numerator = NDF * G * F;
        float denominator = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0) + 0.0001;
        vec3 specular = numerator / denominator;

        vec3 kS = F;
        vec3 kD = vec3(1.0) - kS;
        kD *= 1.0 - metallic;

        float NdotL = max(dot(N, L), 0.0);
        Lo += ((kD * diffuse / PI + specular) * radiance * NdotL);//TODO shadows
    }
    vec3 ambient = vec3(1.0) * diffuse;
    vec3 lightColor = ambient + Lo;
    return lightColor;
}

vec3 sampleTextures(vec3 p, float bias, int probeId)
{
    vec3 col = direct_lighting(p, bias, probeId);
    return col;
}



vec3 SpherePoints_GoldenAngle(float i, float numSamples)
{
    float theta = i * goldenAngle;
    float z = (1.0 - 1.0 / numSamples) * (1.0 - 2.0 * i / (numSamples - 1.0));
    float radius = sqrt(1.0 - z * z);
    return vec3(radius * vec2(cos(theta), sin(theta)), z);
}


myT shDot(in SphericalHarmonics shA, in SphericalHarmonics shB)
{
    myT result = myT(0.0);
    for (int i = 0; i < shSize(myL); ++i)
    {
        result += shA[i] * shB[i];
    }
    return result;
}



const float sqrtPI = 1.7724538509055160272981674833411;
SphericalHarmonics shEvaluate(vec3 p)
{
    // From Peter-Pike Sloan's Stupid SH Tricks
    // http://www.ppsloan.org/publications/StupidSH36.pdf
    // https://github.com/dariomanesku/cmft/blob/master/src/cmft/cubemapfilter.cpp#L130

    SphericalHarmonics result;

    float x = -p.x;
    float y = -p.y;
    float z = p.z;

    float x2 = x*x;
    float y2 = y*y;
    float z2 = z*z;

    float z3 = z2*z;

    float x4 = x2*x2;
    float y4 = y2*y2;
    float z4 = z2*z2;

    int i = 0;

    result[i++] =  myT(1.0f/(2.0f*sqrtPI));

    #if (myL >= 1)
    result[i++] = myT(-sqrt(3.0f/(4.0f*PI))*y);
    result[i++] = myT(sqrt(3.0f/(4.0f*PI))*z);
    result[i++] = myT(-sqrt(3.0f/(4.0f*PI))*x);
    #endif

    #if (myL >= 2)
    result[i++] = myT(sqrt(15.0f/(4.0f*PI))*y*x);
    result[i++] = myT(-sqrt(15.0f/(4.0f*PI))*y*z);
    result[i++] = myT(sqrt(5.0f/(16.0f*PI))*(3.0f*z2-1.0f));
    result[i++] = myT(-sqrt(15.0f/(4.0f*PI))*x*z);
    result[i++] = myT(sqrt(15.0f/(16.0f*PI))*(x2-y2));
    #endif

    #if (myL >= 3)
    result[i++] = myT(-sqrt(70.0f/(64.0f*PI))*y*(3.0f*x2-y2));
    result[i++] = myT(sqrt(105.0f/ (4.0f*PI))*y*x*z);
    result[i++] = myT(-sqrt(21.0f/(16.0f*PI))*y*(-1.0f+5.0f*z2));
    result[i++] = myT(sqrt(7.0f/(16.0f*PI))*(5.0f*z3-3.0f*z));
    result[i++] = myT(-sqrt(42.0f/(64.0f*PI))*x*(-1.0f+5.0f*z2));
    result[i++] = myT(sqrt(105.0f/(16.0f*PI))*(x2-y2)*z);
    result[i++] = myT(-sqrt(70.0f/(64.0f*PI))*x*(x2-3.0f*y2));
    #endif

    #if (myL >= 4)
    result[i++] = myT(3.0f*sqrt(35.0f/(16.0f*PI))*x*y*(x2-y2));
    result[i++] = myT(-3.0f*sqrt(70.0f/(64.0f*PI))*y*z*(3.0f*x2-y2));
    result[i++] = myT(3.0f*sqrt(5.0f/(16.0f*PI))*y*x*(-1.0f+7.0f*z2));
    result[i++] = myT(-3.0f*sqrt(10.0f/(64.0f*PI))*y*z*(-3.0f+7.0f*z2));
    result[i++] = myT((105.0f*z4-90.0f*z2+9.0f)/(16.0f*sqrtPI));
    result[i++] = myT(-3.0f*sqrt(10.0f/(64.0f*PI))*x*z*(-3.0f+7.0f*z2));
    result[i++] = myT(3.0f*sqrt(5.0f/(64.0f*PI))*(x2-y2)*(-1.0f+7.0f*z2));
    result[i++] = myT(-3.0f*sqrt(70.0f/(64.0f*PI))*x*z*(x2-3.0f*y2));
    result[i++] = myT(3.0f*sqrt(35.0f/(4.0f*(64.0f*PI)))*(x4-6.0f*y2*x2+y4));
    #endif

    return result;
}

vec3 GetRadianceFromSH(SphericalHarmonics shRadiance, vec3 direction)
{
    SphericalHarmonics shDirection = shEvaluate(direction);

    vec3 sampleSh = max(vec3(0.0), shDot(shRadiance, shDirection));
    return sampleSh;
}

    SphericalHarmonics probe_to_sh(int idx)
{
    SphericalHarmonics result = shZero();

    vec2 ts = vec2(textureSize(cubemaps[0], 0));
    for (int i = 0; i < 256; i++)
    {
        vec3 dir = SpherePoints_GoldenAngle(float(i), float(256));
        vec3 radiance = sampleTextures(dir, 0.0f, idx);
        shAddWeighted(result, shEvaluate(dir), radiance);
    }

    float shFactor = 4.0 * PI / float(256);
    shScale(result, vec3(shFactor));
    return result;
}

uint lcg(uint seed)
{
    return seed * 1664525u + 1013904223u;
}

float random_float(inout uint seed)
{
    seed = lcg(seed);
    return float(seed) / float(0xffffffffu);
}


void main()
{
    uint id = gl_WorkGroupID.x;
    SphericalHarmonics sh = probe_to_sh(int(id));
    L1SH_0[id] = sh[0];
    L1SH_1[id] = sh[1];
    L1SH_2[id] = sh[2];
    L1SH_3[id] = sh[3];
}