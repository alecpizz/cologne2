#version 460 core
layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
layout (rgba8, binding = 0) uniform writeonly image2D output_image;

layout (binding = 1) uniform sampler3D voxel_texture;
layout (binding = 2) uniform sampler2D position_texture;
layout (binding = 3) uniform sampler2D normal_texture;

#define PI 3.1415926535897932384626433832795

uniform vec3 voxel_offset;
const int TOTAL_DIFFUSE_CONES = 6;
const vec3 DIFFUSE_CONE_DIRECTIONS[TOTAL_DIFFUSE_CONES] = { vec3(0.0f, 1.0f, 0.0f), vec3(0.0f, 0.5f, 0.866025f), vec3(0.823639f, 0.5f, 0.267617f), vec3(0.509037f, 0.5f, -0.7006629f), vec3(-0.50937f, 0.5f, -0.7006629f), vec3(-0.823639f, 0.5f, 0.267617f) };
const float DIFFUSE_CONE_WEIGHTS[TOTAL_DIFFUSE_CONES] = { PI / 4.0f,
3.0f * PI / 20.0f,
3.0f * PI / 20.0f,
3.0f * PI / 20.0f,
3.0f * PI / 20.0f,
3.0f * PI / 20.0f };
uniform vec3 grid_max, grid_min;

vec3 MapRangeToAnOther(vec3 value, vec3 valueMin, vec3 valueMax, vec3 mapMin, vec3 mapMax)
{
    return (value - valueMin) / (valueMax - valueMin) * (mapMax - mapMin) + mapMin;
}

vec3 MapToZeroOne(vec3 value, vec3 rangeMin, vec3 rangeMax)
{
    return MapRangeToAnOther(value, rangeMin, rangeMax, vec3(0.0), vec3(1.0));
}

vec4 cone_trace(vec3 from, vec3 direction, float aperture)
{
    vec3 voxelGridWorldSpaceSize = grid_max - grid_min;
    vec3 voxelWorldSpaceSize = voxelGridWorldSpaceSize / textureSize(voxel_texture, 0);
    float voxelMaxLength = max(voxelWorldSpaceSize.x, max(voxelWorldSpaceSize.y, voxelWorldSpaceSize.z));
    float voxelMinLenght = min(voxelWorldSpaceSize.x, min(voxelWorldSpaceSize.y, voxelWorldSpaceSize.z));
    uint maxLevel = textureQueryLevels(voxel_texture) - 1;
    vec4 accumulated = vec4(0.0f);
    from += direction * voxelMinLenght;
    float distFromStart = voxelMaxLength;
    while (accumulated.a < 0.99f)
    {
        float coneDiameter = 2.0f * aperture * distFromStart;
        float sampleDiameter = max(voxelMinLenght, coneDiameter);
        float sampleLod = log2(sampleDiameter / voxelMinLenght);

        vec3 worldPos = from + direction * distFromStart;
        vec3 sampleUVW = MapToZeroOne(worldPos, grid_min, grid_max) - voxel_offset;
        if (any(lessThan(sampleUVW, vec3(0.0))) || any(greaterThanEqual(sampleUVW, vec3(1.0))) || sampleLod > maxLevel)
        {
            break;
        }

        vec4 samplePremult = textureLod(voxel_texture, sampleUVW, sampleLod);
        float weight = 1.0 - accumulated.a;
        accumulated += weight * samplePremult;
        distFromStart += sampleDiameter * 0.16f;
    }
    return accumulated;
}

vec4 indirect_diffuse(vec3 position, vec3 N)
{
    float aperture =  0.57735;
    vec3 up = vec3(0.0, 1.0, 0.0);
    if (abs(dot(N, up)) > 0.999)
    {
        up = vec3(0.0, 0.0, 1.0);
    }

    vec4 color = vec4(0.0f);
    vec3 T = normalize(up - dot(N, up) * N);
    vec3 B = cross(T, N);

    for (int i = 0; i < TOTAL_DIFFUSE_CONES; i++)
    {
        vec3 direction = T * DIFFUSE_CONE_DIRECTIONS[i].x + B * DIFFUSE_CONE_DIRECTIONS[i].z + N;
        direction = normalize(direction);
        color += DIFFUSE_CONE_WEIGHTS[i] * cone_trace(position, direction, aperture);
    }
    return color;
}

void main()
{
    ivec2 pixel_coord = ivec2(gl_GlobalInvocationID.xy);
    ivec2 output_image_size = imageSize(output_image);
    vec2 uv = (vec2(pixel_coord) + 0.5) / vec2(output_image_size);
    vec3 position = texture(position_texture, uv).xyz;
    vec3 normal = texture(normal_texture, uv).xyz;
    normal = normalize(normal);

    if(pixel_coord.x >= output_image_size.x || pixel_coord.y >= output_image_size.y)
    {
        return;
    }

    vec4 output_color = vec4(0.0);

    output_color = indirect_diffuse(position, normal);

    imageStore(output_image, pixel_coord, output_color);
}